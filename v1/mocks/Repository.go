// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	models "app/v1/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: model
func (_m *Repository) Add(model *models.Song) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Song) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detele provides a mock function with given fields: model
func (_m *Repository) Detele(model *models.Song) error {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Detele")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Song) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: song
func (_m *Repository) Get(song *models.Song) (*models.Song, error) {
	ret := _m.Called(song)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Song) (*models.Song, error)); ok {
		return rf(song)
	}
	if rf, ok := ret.Get(0).(func(*models.Song) *models.Song); ok {
		r0 = rf(song)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Song) error); ok {
		r1 = rf(song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: song, count, offset
func (_m *Repository) GetAll(song *models.Song, count int, offset int) (*[]models.Song, error) {
	ret := _m.Called(song, count, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Song, int, int) (*[]models.Song, error)); ok {
		return rf(song, count, offset)
	}
	if rf, ok := ret.Get(0).(func(*models.Song, int, int) *[]models.Song); ok {
		r0 = rf(song, count, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Song, int, int) error); ok {
		r1 = rf(song, count, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: song
func (_m *Repository) Update(song *models.Song) error {
	ret := _m.Called(song)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Song) error); ok {
		r0 = rf(song)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
